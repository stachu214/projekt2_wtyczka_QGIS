# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WtyczkaDialog
                                 A QGIS plugin
 Wtyczka licząca różnicę wysokości punktów oraz pole zaznaczaonego obszaru.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2024 by SOFG
        email                : 01179194@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'wtyczka_SOFG_dialog_base.ui'))


class WtyczkaDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WtyczkaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self) 
        self.oblicz_dh.clicked.connect(self.obliczenieDh)
        self.oblicz_pole.clicked.connect(self.obliczPole)
        #self.przycisk_pole.clicked.connect(self.obliczeniePola)
        
        
    def obliczenieDh(self):
        self.error.setText('')
        self.wynik_dh.setText('')
        current_layer = self.warstwa.currentLayer()
        selected_features = current_layer.selectedFeatures()

        if len(selected_features) > 2:
            self.error.setText('Wybrano za dużo punktów do obliczenia różnicy wysokoci')
        elif len(selected_features) < 2:
            self.error.setText('Wybrano za mało punktów do obliczenia różnicy wysokoci')
        else:
            h_1 = float(selected_features[0]['wysokosc'])
            h_2 = float(selected_features[1]['wysokosc'])
            d_h = h_2 - h_1
            self.wynik_dh.setText(f'{d_h:.3f} m')

    def obliczPole(self):
        self.error.setText('')
        self.wynik_pole.setText('')

        current_layer = self.warstwa.currentLayer()
        selected_features = current_layer.selectedFeatures()

        if len(selected_features) < 3:
            self.error.setText('Wybrano za mało punktów do obliczenia pola powierzchni')
        else:
            wspolrzedne_punktow = []
            for punkt in selected_features:
                wsp = punkt.geometry().asPoint()
                x_y = (wsp.x(), wsp.y())
                wspolrzedne_punktow.append(x_y)
 #           raise Exception(wspolrzedne_punktow)
            n = len(wspolrzedne_punktow)
            pole = 0
            for i in range(n):
                j = (i + 1) % n 
                pole += wspolrzedne_punktow[i][0] * wspolrzedne_punktow[j][1]
                pole -= wspolrzedne_punktow[j][0] * wspolrzedne_punktow[i][1]
                
            wynik = abs(pole) / 2
            self.wynik_pole.setText(f'{wynik:.3f} m2')